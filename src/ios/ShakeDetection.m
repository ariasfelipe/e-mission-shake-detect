//
//  ShakeDetection.m
//  emission
//
//  Created by Fernanda Arias on 7/18/17.
//
//

#import <Foundation/Foundation.h>
#import "ShakeDetection.h"
#import "BEMBuiltinUserCache.h"
#import "DataUtils.h"
#import "LocalNotificationManager.h"
#include <UIKit/UIKit.h>


#define TRIP_STARTED @"trip_started"
#define TRIP_ENDED @"trip_ended"
#define TRACKING_STARTED @"tracking_started"
#define TRACKING_STOPPED @"tracking_stopped"
#define POTENTIAL_INCIDENT @"potential_incident"

#define CONFIG_LIST_KEY @"config_list"
#define MUTED_LIST_KEY @"muted_list"

@implementation ShakeDetection

/*
- (void)notifyEvent:(NSString *)eventName data:(NSDictionary*)autogenData
{
    [LocalNotificationManager addNotification:[NSString stringWithFormat:@"Generating all notifications for generic %@", eventName] showUI:FALSE];
    
    NSDictionary* notifyConfigWrapper = [[BuiltinUserCache database] getLocalStorage:eventName
                                                                        withMetadata:NO];
    if (notifyConfigWrapper == NULL) {
        [LocalNotificationManager addNotification:[NSString stringWithFormat:@"no configurations found for event %@, skipping notification", eventName] showUI:FALSE];
        return;
    }
    
    NSArray* notifyConfigs = notifyConfigWrapper[CONFIG_LIST_KEY];
    NSArray* mutedConfigs = notifyConfigWrapper[MUTED_LIST_KEY];
    
    for(int i=0; i < [notifyConfigs count]; i++) {
        NSMutableDictionary* currNotifyConfig = [notifyConfigs objectAtIndex:i];
        NSUInteger mutedIndex = [self findIndex:currNotifyConfig fromList:mutedConfigs];
        
        if (mutedIndex == NSNotFound) {
            [LocalNotificationManager addNotification:[NSString stringWithFormat:@"notification for event %@ and id %@ not muted, generate ", eventName, currNotifyConfig[@"id"]] showUI:FALSE];
            if (autogenData != NULL) { // we need to merge in the autogenerated data
                NSMutableDictionary *currData = currNotifyConfig[@"data"];
                if (currData == NULL) {
                    currData = [NSMutableDictionary new];
                    currNotifyConfig[@"data"] = currData;
                }
                [currData addEntriesFromDictionary:autogenData];
            }
            NSString* currNotifyString = [DataUtils saveToJSONString:currNotifyConfig];
            NSString *func = [NSString stringWithFormat:@"window.cordova.plugins.BEMTransitionNotification.dispatchIOSLocalNotification(%@);", currNotifyString];
            [LocalNotificationManager addNotification:[NSString stringWithFormat:@"generating notification for event %@ and id %@", eventName, currNotifyConfig[@"id"]] showUI:FALSE];
            
            [self.commandDelegate evalJs:func];
        } else {
            [LocalNotificationManager addNotification:[NSString stringWithFormat:@"notification for event %@ and id %@ muted, skip ", eventName, currNotifyConfig[@"id"]] showUI:FALSE];
        }
    }
}
*/

-(NSUInteger)findIndex:(NSDictionary*)localNotifyConfig fromList:(NSArray*)currList
{
    // This handles the muted list case. muted list could be null if the event had never been muted
    if (currList == NULL) {
        return NSNotFound;
    }
    NSUInteger existingIndex = [currList indexOfObjectPassingTest:^BOOL(id  _Nonnull obj, NSUInteger idx, BOOL * _Nonnull stop) {
        // Note that the id is a long so == works. If we assume that it is a string, we would need to use isEqualToString
        return obj[@"id"] == localNotifyConfig[@"id"];
    }];
    return existingIndex;
}

+(void)enableGyro{
    motionManager = [[CMMotionManager alloc] init];
    if([motionManager isGyroAvailable]){
        if([motionManager isGyroActive] == NO){
            [motionManager setGyroUpdateInterval:1.0f / 10.0f];
            
            [motionManager startGyroUpdatesToQueue:[NSOperationQueue mainQueue] withHandler:^(CMGyroData *gyroData, NSError *error){
                float rate = gyroData.rotationRate.x;
                if(fabs(rate) > 0.1f){
                    [LocalNotificationManager addNotification:[NSString stringWithFormat:
                                                               @"DetectedShake rotX: %f",
                                                               rate]
                                                       showUI:TRUE];
                }
            }];
        }
    }
}

+(void)disableGyro{
    [motionManager stopGyroUpdates];
}
@end